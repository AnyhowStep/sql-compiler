SELECT @a := b IS NULL
-----
`!
          (expression: UserVariableIdentifierAssignment[7, 22]
            (userVariableIdentifier: UserVariableIdentifier[7, 9]
              (atToken: At[7, 8])
              (identifier: Identifier[8, 9])
            )
            (WhiteSpace[9, 10])
            (colonEqual: ColonEqual[10, 12]
              (colonToken: Colon[10, 11])
              (equalToken: Equal[11, 12])
            )
            (WhiteSpace[12, 13])
            (expression: IsNullBooleanPrimaryExpression[13, 22]
              (expression: Identifier[13, 14])
              (WhiteSpace[14, 15])
              (isToken: IS[15, 17])
              (WhiteSpace[17, 18])
              (nullToken: NULL[18, 22])
            )
          )
!`
-----
SELECT a OR b IS NULL
-----
`!
          (expression: BinaryExpression[7, 21]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: OR[9, 11])
            (WhiteSpace[11, 12])
            (right: IsNullBooleanPrimaryExpression[12, 21]
              (expression: Identifier[12, 13])
              (WhiteSpace[13, 14])
              (isToken: IS[14, 16])
              (WhiteSpace[16, 17])
              (nullToken: NULL[17, 21])
            )
          )
!`
-----
SELECT a XOR b IS NULL
-----
`!
          (expression: BinaryExpression[7, 22]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: XOR[9, 12])
            (WhiteSpace[12, 13])
            (right: IsNullBooleanPrimaryExpression[13, 22]
              (expression: Identifier[13, 14])
              (WhiteSpace[14, 15])
              (isToken: IS[15, 17])
              (WhiteSpace[17, 18])
              (nullToken: NULL[18, 22])
            )
          )
!`
-----
SELECT a AND b IS NULL
-----
`!
          (expression: BinaryExpression[7, 22]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: AND[9, 12])
            (WhiteSpace[12, 13])
            (right: IsNullBooleanPrimaryExpression[13, 22]
              (expression: Identifier[13, 14])
              (WhiteSpace[14, 15])
              (isToken: IS[15, 17])
              (WhiteSpace[17, 18])
              (nullToken: NULL[18, 22])
            )
          )
!`
-----
SELECT NOT a IS NULL
-----
`!
          (expression: NotExpression[7, 20]
            (notToken: NOT[7, 10])
            (WhiteSpace[10, 11])
            (expression: IsNullBooleanPrimaryExpression[11, 20]
              (expression: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (isToken: IS[13, 15])
              (WhiteSpace[15, 16])
              (nullToken: NULL[16, 20])
            )
          )
!`
-----
SELECT a BETWEEN b AND c IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 32]
            (expression: BetweenPredicate[7, 24]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (betweenToken: BETWEEN[9, 16])
              (WhiteSpace[16, 17])
              (middle: Identifier[17, 18])
              (WhiteSpace[18, 19])
              (andToken: AND[19, 22])
              (WhiteSpace[22, 23])
              (right: Identifier[23, 24])
            )
            (WhiteSpace[24, 25])
            (isToken: IS[25, 27])
            (WhiteSpace[27, 28])
            (nullToken: NULL[28, 32])
          )
!`
-----
SELECT a = b IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 20]
            (expression: ComparisonBooleanPrimaryExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Equal[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (isToken: IS[13, 15])
            (WhiteSpace[15, 16])
            (nullToken: NULL[16, 20])
          )
!`
-----
SELECT a = ANY (SELECT b) IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 33]
            (expression: ComparisonSubQueryBooleanPrimaryExpression[7, 25]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Equal[9, 10])
              (WhiteSpace[10, 11])
              (quantifier: ANY[11, 14])
              (WhiteSpace[14, 15])
              (parenthesizedSelect: ParenthesizedSelect[15, 25]
                (openParenthesesToken: OpenParentheses[15, 16])
                (item: Select[16, 24]
                  (selectToken: SELECT[16, 22])
                  (WhiteSpace[22, 23])
                  (selectItemList1: SelectItemList1[23, 24]
                    (item[]: ExpressionSelectItem[23, 24]
                      (expression: Identifier[23, 24])
                    )
                  )
                )
                (closeParenthesesToken: CloseParentheses[24, 25])
              )
            )
            (WhiteSpace[25, 26])
            (isToken: IS[26, 28])
            (WhiteSpace[28, 29])
            (nullToken: NULL[29, 33])
          )
!`
-----
SELECT a IS NULL IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 24]
            (expression: IsNullBooleanPrimaryExpression[7, 16]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (isToken: IS[9, 11])
              (WhiteSpace[11, 12])
              (nullToken: NULL[12, 16])
            )
            (WhiteSpace[16, 17])
            (isToken: IS[17, 19])
            (WhiteSpace[19, 20])
            (nullToken: NULL[20, 24])
          )
!`
-----
SELECT a IS UNKNOWN IS NULL
-----
`!
        (item[]: ExpressionSelectItem[7, 19]
          (expression: IsExpression[7, 19]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (isToken: IS[9, 11])
            (WhiteSpace[11, 12])
            (right: UNKNOWN[12, 19])
          )
        )
        (WhiteSpace[19, 20])
        (Expected commaToken[]: Comma[20, 22])
        (WhiteSpace[22, 23])
        (item[]: ExpressionSelectItem[23, 27]
          (expression: NULL[23, 27])
        )
!`
-----
SELECT a LIKE b IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 23]
            (expression: LikePredicate[7, 15]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (likeToken: LIKE[9, 13])
              (WhiteSpace[13, 14])
              (right: Identifier[14, 15])
            )
            (WhiteSpace[15, 16])
            (isToken: IS[16, 18])
            (WhiteSpace[18, 19])
            (nullToken: NULL[19, 23])
          )
!`
-----
SELECT a REGEXP b IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 25]
            (expression: RegExpPredicate[7, 17]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (regexpToken: REGEXP[9, 15])
              (WhiteSpace[15, 16])
              (right: Identifier[16, 17])
            )
            (WhiteSpace[17, 18])
            (isToken: IS[18, 20])
            (WhiteSpace[20, 21])
            (nullToken: NULL[21, 25])
          )
!`
-----
SELECT a IN (SELECT b) IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 30]
            (expression: InSubQueryPredicate[7, 22]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (inToken: IN[9, 11])
              (WhiteSpace[11, 12])
              (parenthesizedSelect: ParenthesizedSelect[12, 22]
                (openParenthesesToken: OpenParentheses[12, 13])
                (item: Select[13, 21]
                  (selectToken: SELECT[13, 19])
                  (WhiteSpace[19, 20])
                  (selectItemList1: SelectItemList1[20, 21]
                    (item[]: ExpressionSelectItem[20, 21]
                      (expression: Identifier[20, 21])
                    )
                  )
                )
                (closeParenthesesToken: CloseParentheses[21, 22])
              )
            )
            (WhiteSpace[22, 23])
            (isToken: IS[23, 25])
            (WhiteSpace[25, 26])
            (nullToken: NULL[26, 30])
          )
!`
-----
SELECT a IN (b) IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 23]
            (expression: InExpressionTuple1Predicate[7, 15]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (inToken: IN[9, 11])
              (WhiteSpace[11, 12])
              (expressionTuple1: ExpressionTuple1[12, 15]
                (openParenthesesToken: OpenParentheses[12, 13])
                (item[]: Identifier[13, 14])
                (closeParenthesesToken: CloseParentheses[14, 15])
              )
            )
            (WhiteSpace[15, 16])
            (isToken: IS[16, 18])
            (WhiteSpace[18, 19])
            (nullToken: NULL[19, 23])
          )
!`
-----
SELECT a | b IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 20]
            (expression: BinaryBitExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Bar[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (isToken: IS[13, 15])
            (WhiteSpace[15, 16])
            (nullToken: NULL[16, 20])
          )
!`
-----
SELECT a & b IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 20]
            (expression: BinaryBitExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Ampersand[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (isToken: IS[13, 15])
            (WhiteSpace[15, 16])
            (nullToken: NULL[16, 20])
          )
!`
-----
SELECT a << b IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 21]
            (expression: BinaryBitExpression[7, 13]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: LessLess[9, 11])
              (WhiteSpace[11, 12])
              (right: Identifier[12, 13])
            )
            (WhiteSpace[13, 14])
            (isToken: IS[14, 16])
            (WhiteSpace[16, 17])
            (nullToken: NULL[17, 21])
          )
!`
-----
SELECT a + b IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 20]
            (expression: BinaryBitExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Plus[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (isToken: IS[13, 15])
            (WhiteSpace[15, 16])
            (nullToken: NULL[16, 20])
          )
!`
-----
SELECT a * b IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 20]
            (expression: BinaryBitExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Asterisk[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (isToken: IS[13, 15])
            (WhiteSpace[15, 16])
            (nullToken: NULL[16, 20])
          )
!`
-----
SELECT a ^ b IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 20]
            (expression: BinaryBitExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Caret[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (isToken: IS[13, 15])
            (WhiteSpace[15, 16])
            (nullToken: NULL[16, 20])
          )
!`
-----
SELECT - a IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 18]
            (expression: PrefixSimpleExpression[7, 10]
              (operator: Minus[7, 8])
              (WhiteSpace[8, 9])
              (expression: Identifier[9, 10])
            )
            (WhiteSpace[10, 11])
            (isToken: IS[11, 13])
            (WhiteSpace[13, 14])
            (nullToken: NULL[14, 18])
          )
!`
-----
SELECT ! a IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 18]
            (expression: Not2SimpleExpression[7, 10]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 9])
              (expression: Identifier[9, 10])
            )
            (WhiteSpace[10, 11])
            (isToken: IS[11, 13])
            (WhiteSpace[13, 14])
            (nullToken: NULL[14, 18])
          )
!`
-----
SELECT BINARY a IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 23]
            (expression: PrefixSimpleExpression[7, 15]
              (operator: BINARY[7, 13])
              (WhiteSpace[13, 14])
              (expression: Identifier[14, 15])
            )
            (WhiteSpace[15, 16])
            (isToken: IS[16, 18])
            (WhiteSpace[18, 19])
            (nullToken: NULL[19, 23])
          )
!`
-----
SELECT a COLLATE utf8mb4_unicode_ci IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 43]
            (expression: CollateSimpleExpression[7, 35]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (collateToken: COLLATE[9, 16])
              (WhiteSpace[16, 17])
              (collation: Identifier[17, 35])
            )
            (WhiteSpace[35, 36])
            (isToken: IS[36, 38])
            (WhiteSpace[38, 39])
            (nullToken: NULL[39, 43])
          )
!`
-----
SELECT INTERVAL a DAY + b IS NULL
-----
`!
          (expression: IntervalExpressionPlus[7, 33]
            (left: IntervalExpression[7, 21]
              (intervalToken: INTERVAL[7, 15])
              (WhiteSpace[15, 16])
              (expression: Identifier[16, 17])
              (WhiteSpace[17, 18])
              (temporalUnit: DAY[18, 21])
            )
            (WhiteSpace[21, 22])
            (operator: Plus[22, 23])
            (WhiteSpace[23, 24])
            (right: IsNullBooleanPrimaryExpression[24, 33]
!`
