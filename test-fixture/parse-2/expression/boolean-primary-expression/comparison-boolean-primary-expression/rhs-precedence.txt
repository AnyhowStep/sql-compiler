SELECT x = @a := b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 18]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: UserVariableIdentifierAssignment[11, 18]
              (userVariableIdentifier: UserVariableIdentifier[11, 13]
                (atToken: At[11, 12])
                (identifier: Identifier[12, 13])
              )
              (WhiteSpace[13, 14])
              (colonEqualToken: ColonEqual[14, 16])
              (WhiteSpace[16, 17])
              (expression: Identifier[17, 18])
            )
          )
!`
-----
SELECT x = a OR b
-----
`!
          (expression: BinaryExpression[7, 17]
            (left: ComparisonBooleanPrimaryExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Equal[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (operator: OR[13, 15])
            (WhiteSpace[15, 16])
            (right: Identifier[16, 17])
          )
!`
-----
SELECT x = a XOR b
-----
`!
          (expression: BinaryExpression[7, 18]
            (left: ComparisonBooleanPrimaryExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Equal[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (operator: XOR[13, 16])
            (WhiteSpace[16, 17])
            (right: Identifier[17, 18])
          )
!`
-----
SELECT x = a AND b
-----
`!
          (expression: BinaryExpression[7, 18]
            (left: ComparisonBooleanPrimaryExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Equal[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (operator: AND[13, 16])
            (WhiteSpace[16, 17])
            (right: Identifier[17, 18])
          )
!`
-----
SELECT x = NOT a
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 16]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (Unexpected NOT[11, 14])
            (WhiteSpace[14, 15])
            (right: Identifier[15, 16])
          )
!`
-----
SELECT x = a BETWEEN b AND c
-- BETWEEN has higher precedence
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 28]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: BetweenPredicate[11, 28]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (betweenToken: BETWEEN[13, 20])
              (WhiteSpace[20, 21])
              (middle: Identifier[21, 22])
              (WhiteSpace[22, 23])
              (andToken: AND[23, 26])
              (WhiteSpace[26, 27])
              (right: Identifier[27, 28])
            )
          )
!`
-----
SELECT x = a = b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 16]
            (left: ComparisonBooleanPrimaryExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Equal[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (operator: Equal[13, 14])
            (WhiteSpace[14, 15])
            (right: Identifier[15, 16])
          )
!`
-----
SELECT x = a = ANY (SELECT b)
-----
`!
          (expression: ComparisonSubQueryBooleanPrimaryExpression[7, 29]
            (expression: ComparisonBooleanPrimaryExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Equal[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (operator: Equal[13, 14])
            (WhiteSpace[14, 15])
            (quantifier: ANY[15, 18])
            (WhiteSpace[18, 19])
            (parenthesizedSelect: ParenthesizedSelect[19, 29]
!`
-----
SELECT x = a IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 20]
            (expression: ComparisonBooleanPrimaryExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Equal[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (isToken: IS[13, 15])
            (WhiteSpace[15, 16])
            (nullToken: NULL[16, 20])
          )
!`
-----
SELECT x = a IS UNKNOWN
-----
`!
          (expression: IsExpression[7, 23]
            (left: ComparisonBooleanPrimaryExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Equal[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (isToken: IS[13, 15])
            (WhiteSpace[15, 16])
            (right: UNKNOWN[16, 23])
          )
!`
-----
SELECT x = a LIKE b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 19]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: LikePredicate[11, 19]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (likeToken: LIKE[13, 17])
              (WhiteSpace[17, 18])
              (right: Identifier[18, 19])
            )
          )
!`
-----
SELECT x = a SOUNDS LIKE b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 26]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: SoundsLikePredicate[11, 26]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (soundsToken: SOUNDS[13, 19])
              (WhiteSpace[19, 20])
              (likeToken: LIKE[20, 24])
              (WhiteSpace[24, 25])
              (right: Identifier[25, 26])
            )
          )
!`
-----
SELECT x = a REGEXP b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 21]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: RegExpPredicate[11, 21]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (regexpToken: REGEXP[13, 19])
              (WhiteSpace[19, 20])
              (right: Identifier[20, 21])
            )
          )
!`
-----
SELECT x = a IN (SELECT b)
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 26]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: InSubQueryPredicate[11, 26]
              (expression: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (inToken: IN[13, 15])
              (WhiteSpace[15, 16])
              (parenthesizedSelect: ParenthesizedSelect[16, 26]
!`
-----
SELECT x = a IN (b)
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 19]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: InExpressionTuple1Predicate[11, 19]
              (expression: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (inToken: IN[13, 15])
              (WhiteSpace[15, 16])
              (expressionTuple1: ExpressionTuple1[16, 19]
                (openParenthesesToken: OpenParentheses[16, 17])
                (item[]: Identifier[17, 18])
                (closeParenthesesToken: CloseParentheses[18, 19])
              )
            )
          )
!`
-----
SELECT x = a | b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 16]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: BinaryBitExpression[11, 16]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (operator: Bar[13, 14])
              (WhiteSpace[14, 15])
              (right: Identifier[15, 16])
            )
          )
!`
-----
SELECT x = a & b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 16]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: BinaryBitExpression[11, 16]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (operator: Ampersand[13, 14])
              (WhiteSpace[14, 15])
              (right: Identifier[15, 16])
            )
          )
!`
-----
SELECT x = a << b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 17]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: BinaryBitExpression[11, 17]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (operator: LessLess[13, 15])
              (WhiteSpace[15, 16])
              (right: Identifier[16, 17])
            )
          )
!`
-----
SELECT x = a + b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 16]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: BinaryBitExpression[11, 16]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (operator: Plus[13, 14])
              (WhiteSpace[14, 15])
              (right: Identifier[15, 16])
            )
          )
!`
-----
SELECT x = a * b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 16]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: BinaryBitExpression[11, 16]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (operator: Asterisk[13, 14])
              (WhiteSpace[14, 15])
              (right: Identifier[15, 16])
            )
          )
!`
-----
SELECT x = a ^ b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 16]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: BinaryBitExpression[11, 16]
!`
-----
SELECT x = - a
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 14]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: PrefixSimpleExpression[11, 14]
!`
-----
SELECT x = ! a
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 14]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: Not2SimpleExpression[11, 14]
!`
-----
SELECT x = BINARY a
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 19]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: PrefixSimpleExpression[11, 19]
!`
-----
SELECT x = a COLLATE utf8mb4_unicode_ci
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 39]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: CollateSimpleExpression[11, 39]
!`
-----
SELECT x = INTERVAL a DAY + b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 29]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: IntervalExpressionPlus[11, 29]
!`
