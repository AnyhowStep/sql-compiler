SELECT a = b IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 20]
            (expression: ComparisonBooleanPrimaryExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Equal[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (isToken: IS[13, 15])
            (WhiteSpace[15, 16])
            (nullToken: NULL[16, 20])
          )
!`
-----
SELECT a IS NULL = b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 20]
            (left: IsNullBooleanPrimaryExpression[7, 16]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (isToken: IS[9, 11])
              (WhiteSpace[11, 12])
              (nullToken: NULL[12, 16])
            )
            (WhiteSpace[16, 17])
            (operator: Equal[17, 18])
            (WhiteSpace[18, 19])
            (right: Identifier[19, 20])
          )
!`
-----
SELECT a = b IS UNKNOWN
-----
`!
          (expression: IsExpression[7, 23]
            (left: ComparisonBooleanPrimaryExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Equal[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (isToken: IS[13, 15])
            (WhiteSpace[15, 16])
            (right: UNKNOWN[16, 23])
          )
!`
-----
SELECT a IS UNKNOWN = b
-- This is invalid syntax
-----
`!
        (item[]: ExpressionSelectItem[7, 19]
          (expression: IsExpression[7, 19]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (isToken: IS[9, 11])
            (WhiteSpace[11, 12])
            (right: UNKNOWN[12, 19])
          )
        )
        (WhiteSpace[19, 20])
        (Expected commaToken[]: Comma[20, 21])
        (WhiteSpace[21, 22])
        (item[]: ExpressionSelectItem[22, 23]
          (expression: Identifier[22, 23])
        )
!`
-----
SELECT a = b LIKE c
-- Documentation says it should be parsed: (a = b) LIKE c
-- But MySQL actually parses: a = (b LIKE c)
-- Check https://github.com/AnyhowStep/sql-compiler/issues/27
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 19]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: LikePredicate[11, 19]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (likeToken: LIKE[13, 17])
              (WhiteSpace[17, 18])
              (right: Identifier[18, 19])
            )
          )
!`
-----
SELECT a LIKE b = c
-- This actually should be parsed: (a LIKE b) = c
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 19]
            (left: LikePredicate[7, 15]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (likeToken: LIKE[9, 13])
              (WhiteSpace[13, 14])
              (right: Identifier[14, 15])
            )
            (WhiteSpace[15, 16])
            (operator: Equal[16, 17])
            (WhiteSpace[17, 18])
            (right: Identifier[18, 19])
          )
!`
-----
SELECT a = b REGEXP c
-- Documentation says it should be parsed: (a = b) REGEXP c
-- But MySQL actually parses: a = (b REGEXP c)
-- For the same reason it parses LIKE in that manner
-- Check https://github.com/AnyhowStep/sql-compiler/issues/27
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 21]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: RegExpPredicate[11, 21]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (regexpToken: REGEXP[13, 19])
              (WhiteSpace[19, 20])
              (right: Identifier[20, 21])
            )
          )
!`
-----
SELECT a REGEXP b = c
-- This actually should be parsed: (a REGEXP b) = c
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 21]
            (left: RegExpPredicate[7, 17]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (regexpToken: REGEXP[9, 15])
              (WhiteSpace[15, 16])
              (right: Identifier[16, 17])
            )
            (WhiteSpace[17, 18])
            (operator: Equal[18, 19])
            (WhiteSpace[19, 20])
            (right: Identifier[20, 21])
          )
!`
-----
SELECT a = b IN (SELECT c)
-- Documentation says it should be parsed: (a = b) IN c
-- But MySQL actually parses: a = (b IN c)
-- For the same reason it parses LIKE in that manner
-- Check https://github.com/AnyhowStep/sql-compiler/issues/27
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 26]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: InSubQueryPredicate[11, 26]
              (expression: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (inToken: IN[13, 15])
              (WhiteSpace[15, 16])
              (parenthesizedSelect: ParenthesizedSelect[16, 26]
                (openParenthesesToken: OpenParentheses[16, 17])
                (item: Select[17, 25]
                  (selectToken: SELECT[17, 23])
                  (WhiteSpace[23, 24])
                  (selectItemList1: SelectItemList1[24, 25]
                    (item[]: ExpressionSelectItem[24, 25]
                      (expression: Identifier[24, 25])
                    )
                  )
                )
                (closeParenthesesToken: CloseParentheses[25, 26])
              )
            )
          )
!`
-----
SELECT a IN (SELECT b) = c
-- This actually should be parsed: (a IN b) = c
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 26]
            (left: InSubQueryPredicate[7, 22]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (inToken: IN[9, 11])
              (WhiteSpace[11, 12])
              (parenthesizedSelect: ParenthesizedSelect[12, 22]
                (openParenthesesToken: OpenParentheses[12, 13])
                (item: Select[13, 21]
                  (selectToken: SELECT[13, 19])
                  (WhiteSpace[19, 20])
                  (selectItemList1: SelectItemList1[20, 21]
                    (item[]: ExpressionSelectItem[20, 21]
                      (expression: Identifier[20, 21])
                    )
                  )
                )
                (closeParenthesesToken: CloseParentheses[21, 22])
              )
            )
            (WhiteSpace[22, 23])
            (operator: Equal[23, 24])
            (WhiteSpace[24, 25])
            (right: Identifier[25, 26])
          )
!`
-----
SELECT a = b IN (c1, c2)
-- Documentation says it should be parsed: (a = b) IN c
-- But MySQL actually parses: a = (b IN c)
-- For the same reason it parses LIKE in that manner
-- Check https://github.com/AnyhowStep/sql-compiler/issues/27
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 24]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: InExpressionTuple1Predicate[11, 24]
              (expression: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (inToken: IN[13, 15])
              (WhiteSpace[15, 16])
              (expressionTuple1: ExpressionTuple1[16, 24]
                (openParenthesesToken: OpenParentheses[16, 17])
                (item[]: Identifier[17, 19])
                (commaToken[]: Comma[19, 20])
                (WhiteSpace[20, 21])
                (item[]: Identifier[21, 23])
                (closeParenthesesToken: CloseParentheses[23, 24])
              )
            )
          )
!`
-----
SELECT a IN (b1, b2) = c
-- This actually should be parsed: (a IN b) = c
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 24]
            (left: InExpressionTuple1Predicate[7, 20]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (inToken: IN[9, 11])
              (WhiteSpace[11, 12])
              (expressionTuple1: ExpressionTuple1[12, 20]
                (openParenthesesToken: OpenParentheses[12, 13])
                (item[]: Identifier[13, 15])
                (commaToken[]: Comma[15, 16])
                (WhiteSpace[16, 17])
                (item[]: Identifier[17, 19])
                (closeParenthesesToken: CloseParentheses[19, 20])
              )
            )
            (WhiteSpace[20, 21])
            (operator: Equal[21, 22])
            (WhiteSpace[22, 23])
            (right: Identifier[23, 24])
          )
!`
