SELECT @a := b SOUNDS LIKE x
-----
`!
          (expression: UserVariableIdentifierAssignment[7, 28]
            (userVariableIdentifier: UserVariableIdentifier[7, 9]
              (atToken: At[7, 8])
              (identifier: Identifier[8, 9])
            )
            (WhiteSpace[9, 10])
            (colonEqual: ColonEqual[10, 12]
              (colonToken: Colon[10, 11])
              (equalToken: Equal[11, 12])
            )
            (WhiteSpace[12, 13])
            (expression: SoundsLikePredicate[13, 28]
              (left: Identifier[13, 14])
              (WhiteSpace[14, 15])
              (soundsToken: SOUNDS[15, 21])
              (WhiteSpace[21, 22])
              (likeToken: LIKE[22, 26])
              (WhiteSpace[26, 27])
              (right: Identifier[27, 28])
            )
          )
!`
-----
SELECT a OR b SOUNDS LIKE x
-----
`!
          (expression: BinaryExpression[7, 27]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: OR[9, 11])
            (WhiteSpace[11, 12])
            (right: SoundsLikePredicate[12, 27]
              (left: Identifier[12, 13])
              (WhiteSpace[13, 14])
              (soundsToken: SOUNDS[14, 20])
              (WhiteSpace[20, 21])
              (likeToken: LIKE[21, 25])
              (WhiteSpace[25, 26])
              (right: Identifier[26, 27])
            )
          )
!`
-----
SELECT a XOR b SOUNDS LIKE x
-----
`!
          (expression: BinaryExpression[7, 28]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: XOR[9, 12])
            (WhiteSpace[12, 13])
            (right: SoundsLikePredicate[13, 28]
              (left: Identifier[13, 14])
              (WhiteSpace[14, 15])
              (soundsToken: SOUNDS[15, 21])
              (WhiteSpace[21, 22])
              (likeToken: LIKE[22, 26])
              (WhiteSpace[26, 27])
              (right: Identifier[27, 28])
            )
          )
!`
-----
SELECT a AND b SOUNDS LIKE x
-----
`!
          (expression: BinaryExpression[7, 28]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: AND[9, 12])
            (WhiteSpace[12, 13])
            (right: SoundsLikePredicate[13, 28]
              (left: Identifier[13, 14])
              (WhiteSpace[14, 15])
              (soundsToken: SOUNDS[15, 21])
              (WhiteSpace[21, 22])
              (likeToken: LIKE[22, 26])
              (WhiteSpace[26, 27])
              (right: Identifier[27, 28])
            )
          )
!`
-----
SELECT NOT a SOUNDS LIKE x
-----
`!
          (expression: NotExpression[7, 26]
            (notToken: NOT[7, 10])
            (WhiteSpace[10, 11])
            (expression: SoundsLikePredicate[11, 26]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (soundsToken: SOUNDS[13, 19])
              (WhiteSpace[19, 20])
              (likeToken: LIKE[20, 24])
              (WhiteSpace[24, 25])
              (right: Identifier[25, 26])
            )
          )
!`
-----
SELECT a BETWEEN b AND c SOUNDS LIKE x
-----
`!
          (expression: BetweenPredicate[7, 38]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (betweenToken: BETWEEN[9, 16])
            (WhiteSpace[16, 17])
            (middle: Identifier[17, 18])
            (WhiteSpace[18, 19])
            (andToken: AND[19, 22])
            (WhiteSpace[22, 23])
            (right: SoundsLikePredicate[23, 38]
              (left: Identifier[23, 24])
              (WhiteSpace[24, 25])
              (soundsToken: SOUNDS[25, 31])
              (WhiteSpace[31, 32])
              (likeToken: LIKE[32, 36])
              (WhiteSpace[36, 37])
              (right: Identifier[37, 38])
            )
          )
!`
-----
SELECT a = b SOUNDS LIKE x
-- SOUNDS LIKE actually has higher precedence
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 26]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: SoundsLikePredicate[11, 26]
              (left: Identifier[11, 12])
              (WhiteSpace[12, 13])
              (soundsToken: SOUNDS[13, 19])
              (WhiteSpace[19, 20])
              (likeToken: LIKE[20, 24])
              (WhiteSpace[24, 25])
              (right: Identifier[25, 26])
            )
          )
!`
-----
SELECT a = ANY (SELECT b) SOUNDS LIKE x
-- This is, indeed, invalid syntax
-----
`!
        (item[]: ExpressionSelectItem[7, 32]
          (expression: ComparisonSubQueryBooleanPrimaryExpression[7, 25]
            (expression: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (quantifier: ANY[11, 14])
            (WhiteSpace[14, 15])
            (parenthesizedSelect: ParenthesizedSelect[15, 25]
              (openParenthesesToken: OpenParentheses[15, 16])
              (item: Select[16, 24]
                (selectToken: SELECT[16, 22])
                (WhiteSpace[22, 23])
                (selectItemList1: SelectItemList1[23, 24]
                  (item[]: ExpressionSelectItem[23, 24]
                    (expression: Identifier[23, 24])
                  )
                )
              )
              (closeParenthesesToken: CloseParentheses[24, 25])
            )
          )
          (WhiteSpace[25, 26])
          (alias: Alias[26, 32]
            (alias: SOUNDS[26, 32])
          )
        )
        (WhiteSpace[32, 33])
        (Expected commaToken[]: Comma[33, 37])
        (WhiteSpace[37, 38])
        (item[]: ExpressionSelectItem[38, 39]
          (expression: Identifier[38, 39])
        )
!`
-----
SELECT a IS NULL SOUNDS LIKE x
-- This is, indeed, a syntax error
-----
`!
        (item[]: ExpressionSelectItem[7, 23]
          (expression: IsNullBooleanPrimaryExpression[7, 16]
            (expression: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (isToken: IS[9, 11])
            (WhiteSpace[11, 12])
            (nullToken: NULL[12, 16])
          )
          (WhiteSpace[16, 17])
          (alias: Alias[17, 23]
            (alias: SOUNDS[17, 23])
          )
        )
        (WhiteSpace[23, 24])
        (Expected commaToken[]: Comma[24, 28])
        (WhiteSpace[28, 29])
        (item[]: ExpressionSelectItem[29, 30]
          (expression: Identifier[29, 30])
        )
!`
-----
SELECT a IS UNKNOWN SOUNDS LIKE x
-- This is, indeed, a syntax error
-----
`!
        (item[]: ExpressionSelectItem[7, 26]
          (expression: IsExpression[7, 19]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (isToken: IS[9, 11])
            (WhiteSpace[11, 12])
            (right: UNKNOWN[12, 19])
          )
          (WhiteSpace[19, 20])
          (alias: Alias[20, 26]
            (alias: SOUNDS[20, 26])
          )
        )
        (WhiteSpace[26, 27])
        (Expected commaToken[]: Comma[27, 31])
        (WhiteSpace[31, 32])
        (item[]: ExpressionSelectItem[32, 33]
          (expression: Identifier[32, 33])
        )
!`
-----
SELECT a LIKE b SOUNDS LIKE x
-- This is, indeed, a syntax error
-----
`!
        (item[]: ExpressionSelectItem[7, 22]
          (expression: LikePredicate[7, 15]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (likeToken: LIKE[9, 13])
            (WhiteSpace[13, 14])
            (right: Identifier[14, 15])
          )
          (WhiteSpace[15, 16])
          (alias: Alias[16, 22]
            (alias: SOUNDS[16, 22])
          )
        )
        (WhiteSpace[22, 23])
        (Expected commaToken[]: Comma[23, 27])
        (WhiteSpace[27, 28])
        (item[]: ExpressionSelectItem[28, 29]
          (expression: Identifier[28, 29])
        )
!`
-----
SELECT a SOUNDS LIKE b SOUNDS LIKE x
-- This is, indeed, a syntax error
-----
`!
        (item[]: ExpressionSelectItem[7, 29]
          (expression: SoundsLikePredicate[7, 22]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (soundsToken: SOUNDS[9, 15])
            (WhiteSpace[15, 16])
            (likeToken: LIKE[16, 20])
            (WhiteSpace[20, 21])
            (right: Identifier[21, 22])
          )
          (WhiteSpace[22, 23])
          (alias: Alias[23, 29]
            (alias: SOUNDS[23, 29])
          )
        )
        (WhiteSpace[29, 30])
        (Expected commaToken[]: Comma[30, 34])
        (WhiteSpace[34, 35])
        (item[]: ExpressionSelectItem[35, 36]
          (expression: Identifier[35, 36])
        )
!`
-----
SELECT a REGEXP b SOUNDS LIKE x
-- This is, indeed, a syntax error
-----
`!
        (item[]: ExpressionSelectItem[7, 24]
          (expression: RegExpPredicate[7, 17]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (regexpToken: REGEXP[9, 15])
            (WhiteSpace[15, 16])
            (right: Identifier[16, 17])
          )
          (WhiteSpace[17, 18])
          (alias: Alias[18, 24]
            (alias: SOUNDS[18, 24])
          )
        )
        (WhiteSpace[24, 25])
        (Expected commaToken[]: Comma[25, 29])
        (WhiteSpace[29, 30])
        (item[]: ExpressionSelectItem[30, 31]
          (expression: Identifier[30, 31])
        )
!`
-----
SELECT a IN (SELECT b) SOUNDS LIKE x
-- This is, indeed, a syntax error
-----
`!
        (item[]: ExpressionSelectItem[7, 29]
          (expression: InSubQueryPredicate[7, 22]
            (expression: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (inToken: IN[9, 11])
            (WhiteSpace[11, 12])
            (parenthesizedSelect: ParenthesizedSelect[12, 22]
              (openParenthesesToken: OpenParentheses[12, 13])
              (item: Select[13, 21]
                (selectToken: SELECT[13, 19])
                (WhiteSpace[19, 20])
                (selectItemList1: SelectItemList1[20, 21]
                  (item[]: ExpressionSelectItem[20, 21]
                    (expression: Identifier[20, 21])
                  )
                )
              )
              (closeParenthesesToken: CloseParentheses[21, 22])
            )
          )
          (WhiteSpace[22, 23])
          (alias: Alias[23, 29]
            (alias: SOUNDS[23, 29])
          )
        )
        (WhiteSpace[29, 30])
        (Expected commaToken[]: Comma[30, 34])
        (WhiteSpace[34, 35])
        (item[]: ExpressionSelectItem[35, 36]
          (expression: Identifier[35, 36])
        )
!`
-----
SELECT a IN (b) SOUNDS LIKE x
-- This is, indeed, a syntax error
-----
`!
        (item[]: ExpressionSelectItem[7, 22]
          (expression: InExpressionTuple1Predicate[7, 15]
            (expression: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (inToken: IN[9, 11])
            (WhiteSpace[11, 12])
            (expressionTuple1: ExpressionTuple1[12, 15]
              (openParenthesesToken: OpenParentheses[12, 13])
              (item[]: Identifier[13, 14])
              (closeParenthesesToken: CloseParentheses[14, 15])
            )
          )
          (WhiteSpace[15, 16])
          (alias: Alias[16, 22]
            (alias: SOUNDS[16, 22])
          )
        )
        (WhiteSpace[22, 23])
        (Expected commaToken[]: Comma[23, 27])
        (WhiteSpace[27, 28])
        (item[]: ExpressionSelectItem[28, 29]
          (expression: Identifier[28, 29])
        )
!`
-----
SELECT a | b SOUNDS LIKE x
-----
`!
          (expression: SoundsLikePredicate[7, 26]
            (left: BinaryBitExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Bar[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (soundsToken: SOUNDS[13, 19])
            (WhiteSpace[19, 20])
            (likeToken: LIKE[20, 24])
            (WhiteSpace[24, 25])
            (right: Identifier[25, 26])
          )
!`
-----
SELECT a & b SOUNDS LIKE x
-----
`!
          (expression: SoundsLikePredicate[7, 26]
            (left: BinaryBitExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Ampersand[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (soundsToken: SOUNDS[13, 19])
            (WhiteSpace[19, 20])
            (likeToken: LIKE[20, 24])
            (WhiteSpace[24, 25])
            (right: Identifier[25, 26])
          )
!`
-----
SELECT a << b SOUNDS LIKE x
-----
`!
          (expression: SoundsLikePredicate[7, 27]
            (left: BinaryBitExpression[7, 13]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: LessLess[9, 11])
              (WhiteSpace[11, 12])
              (right: Identifier[12, 13])
            )
            (WhiteSpace[13, 14])
            (soundsToken: SOUNDS[14, 20])
            (WhiteSpace[20, 21])
            (likeToken: LIKE[21, 25])
            (WhiteSpace[25, 26])
            (right: Identifier[26, 27])
          )
!`
-----
SELECT a + b SOUNDS LIKE x
-----
`!
          (expression: SoundsLikePredicate[7, 26]
            (left: BinaryBitExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Plus[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (soundsToken: SOUNDS[13, 19])
            (WhiteSpace[19, 20])
            (likeToken: LIKE[20, 24])
            (WhiteSpace[24, 25])
            (right: Identifier[25, 26])
          )
!`
-----
SELECT a * b SOUNDS LIKE x
-----
`!
          (expression: SoundsLikePredicate[7, 26]
            (left: BinaryBitExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Asterisk[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (soundsToken: SOUNDS[13, 19])
            (WhiteSpace[19, 20])
            (likeToken: LIKE[20, 24])
            (WhiteSpace[24, 25])
            (right: Identifier[25, 26])
          )
!`
-----
SELECT a ^ b SOUNDS LIKE x
-----
`!
          (expression: SoundsLikePredicate[7, 26]
            (left: BinaryBitExpression[7, 12]
              (left: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Caret[9, 10])
              (WhiteSpace[10, 11])
              (right: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (soundsToken: SOUNDS[13, 19])
            (WhiteSpace[19, 20])
            (likeToken: LIKE[20, 24])
            (WhiteSpace[24, 25])
            (right: Identifier[25, 26])
          )
!`
-----
SELECT - a SOUNDS LIKE x
-----
`!
          (expression: SoundsLikePredicate[7, 24]
            (left: PrefixSimpleExpression[7, 10]
              (operator: Minus[7, 8])
              (WhiteSpace[8, 9])
              (expression: Identifier[9, 10])
            )
            (WhiteSpace[10, 11])
            (soundsToken: SOUNDS[11, 17])
            (WhiteSpace[17, 18])
            (likeToken: LIKE[18, 22])
            (WhiteSpace[22, 23])
            (right: Identifier[23, 24])
          )
!`
-----
SELECT ! a SOUNDS LIKE x
-----
`!
          (expression: SoundsLikePredicate[7, 24]
            (left: Not2SimpleExpression[7, 10]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 9])
              (expression: Identifier[9, 10])
            )
            (WhiteSpace[10, 11])
            (soundsToken: SOUNDS[11, 17])
            (WhiteSpace[17, 18])
            (likeToken: LIKE[18, 22])
            (WhiteSpace[22, 23])
            (right: Identifier[23, 24])
          )
!`
-----
SELECT BINARY a SOUNDS LIKE x
-----
`!
          (expression: SoundsLikePredicate[7, 29]
            (left: PrefixSimpleExpression[7, 15]
              (operator: BINARY[7, 13])
              (WhiteSpace[13, 14])
              (expression: Identifier[14, 15])
            )
            (WhiteSpace[15, 16])
            (soundsToken: SOUNDS[16, 22])
            (WhiteSpace[22, 23])
            (likeToken: LIKE[23, 27])
            (WhiteSpace[27, 28])
            (right: Identifier[28, 29])
          )
!`
-----
SELECT a COLLATE utf8mb4_unicode_ci SOUNDS LIKE x
-----
`!
          (expression: SoundsLikePredicate[7, 49]
            (left: CollateSimpleExpression[7, 35]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (collateToken: COLLATE[9, 16])
              (WhiteSpace[16, 17])
              (collation: Identifier[17, 35])
            )
            (WhiteSpace[35, 36])
            (soundsToken: SOUNDS[36, 42])
            (WhiteSpace[42, 43])
            (likeToken: LIKE[43, 47])
            (WhiteSpace[47, 48])
            (right: Identifier[48, 49])
          )
!`
-----
SELECT INTERVAL a DAY + b SOUNDS LIKE x
-----
`!
          (expression: IntervalExpressionPlus[7, 39]
            (left: IntervalExpression[7, 21]
              (intervalToken: INTERVAL[7, 15])
              (WhiteSpace[15, 16])
              (expression: Identifier[16, 17])
              (WhiteSpace[17, 18])
              (temporalUnit: DAY[18, 21])
            )
            (WhiteSpace[21, 22])
            (operator: Plus[22, 23])
            (WhiteSpace[23, 24])
            (right: SoundsLikePredicate[24, 39]
              (left: Identifier[24, 25])
              (WhiteSpace[25, 26])
              (soundsToken: SOUNDS[26, 32])
              (WhiteSpace[32, 33])
              (likeToken: LIKE[33, 37])
              (WhiteSpace[37, 38])
              (right: Identifier[38, 39])
            )
          )
!`
