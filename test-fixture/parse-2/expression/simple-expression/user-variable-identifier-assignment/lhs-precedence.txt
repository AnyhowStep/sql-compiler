SELECT @a := @b := x
-----
`!
          (expression: UserVariableIdentifierAssignment[7, 20]
            (userVariableIdentifier: UserVariableIdentifier[7, 9]
              (atToken: At[7, 8])
              (identifier: Identifier[8, 9])
            )
            (WhiteSpace[9, 10])
            (colonEqual: ColonEqual[10, 12]
              (colonToken: Colon[10, 11])
              (equalToken: Equal[11, 12])
            )
            (WhiteSpace[12, 13])
            (expression: UserVariableIdentifierAssignment[13, 20]
!`
-----
SELECT a OR @b := x
-----
`!
          (expression: BinaryExpression[7, 19]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: OR[9, 11])
            (WhiteSpace[11, 12])
            (right: UserVariableIdentifierAssignment[12, 19]
!`
-----
SELECT a XOR @b := x
-----
`!
          (expression: BinaryExpression[7, 20]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: XOR[9, 12])
            (WhiteSpace[12, 13])
            (right: UserVariableIdentifierAssignment[13, 20]
!`
-----
SELECT a AND @b := x
-----
`!
          (expression: BinaryExpression[7, 20]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: AND[9, 12])
            (WhiteSpace[12, 13])
            (right: UserVariableIdentifierAssignment[13, 20]
!`
-----
SELECT NOT @a := x
-----
`!
          (expression: NotExpression[7, 18]
            (notToken: NOT[7, 10])
            (WhiteSpace[10, 11])
            (expression: UserVariableIdentifierAssignment[11, 18]
!`
-----
SELECT a BETWEEN b AND @c := x
-----
`!
          (expression: BetweenPredicate[7, 30]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (betweenToken: BETWEEN[9, 16])
            (WhiteSpace[16, 17])
            (middle: Identifier[17, 18])
            (WhiteSpace[18, 19])
            (andToken: AND[19, 22])
            (WhiteSpace[22, 23])
            (right: UserVariableIdentifierAssignment[23, 30]
!`
-----
SELECT a = @b := x
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 18]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Equal[9, 10])
            (WhiteSpace[10, 11])
            (right: UserVariableIdentifierAssignment[11, 18]
!`
-----
SELECT a = ANY (SELECT b) := x
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 30]
            (left: ComparisonSubQueryBooleanPrimaryExpression[7, 25]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (operator: Equal[9, 10])
              (WhiteSpace[10, 11])
              (quantifier: ANY[11, 14])
              (WhiteSpace[14, 15])
              (parenthesizedSelect: ParenthesizedSelect[15, 25]
                (openParenthesesToken: OpenParentheses[15, 16])
                (item: Select[16, 24]
                  (selectToken: SELECT[16, 22])
                  (WhiteSpace[22, 23])
                  (selectItemList1: SelectItemList1[23, 24]
                    (item[]: ExpressionSelectItem[23, 24]
                      (expression: Identifier[23, 24])
                    )
                  )
                )
                (closeParenthesesToken: CloseParentheses[24, 25])
              )
            )
            (WhiteSpace[25, 26])
            (Unexpected Colon[26, 27])
            (operator: Equal[27, 28])
            (WhiteSpace[28, 29])
            (right: Identifier[29, 30])
          )
!`
-----
SELECT a IS NULL := x
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 21]
            (left: IsNullBooleanPrimaryExpression[7, 16]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (isToken: IS[9, 11])
              (WhiteSpace[11, 12])
              (nullToken: NULL[12, 16])
            )
            (WhiteSpace[16, 17])
            (Unexpected Colon[17, 18])
            (operator: Equal[18, 19])
            (WhiteSpace[19, 20])
            (right: Identifier[20, 21])
          )
!`
-----
SELECT a IS UNKNOWN := x
-----
`!
        (item[]: ExpressionSelectItem[7, 24]
          (expression: IsExpression[7, 19]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (isToken: IS[9, 11])
            (WhiteSpace[11, 12])
            (right: UNKNOWN[12, 19])
          )
          (WhiteSpace[19, 20])
          (Unexpected Colon[20, 21])
          (Unexpected Equal[21, 22])
          (WhiteSpace[22, 23])
          (alias: Alias[23, 24]
            (alias: Identifier[23, 24])
          )
        )
!`
-----
SELECT a LIKE @b := x
-----
`!
          (expression: LikePredicate[7, 21]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (likeToken: LIKE[9, 13])
            (WhiteSpace[13, 14])
            (right: UserVariableIdentifierAssignment[14, 21]
!`
-----
SELECT a REGEXP @b := x
-----
`!
          (expression: RegExpPredicate[7, 23]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (regexpToken: REGEXP[9, 15])
            (WhiteSpace[15, 16])
            (right: UserVariableIdentifierAssignment[16, 23]
!`
-----
SELECT a IN (SELECT b) := x
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 27]
            (left: InSubQueryPredicate[7, 22]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (inToken: IN[9, 11])
              (WhiteSpace[11, 12])
              (parenthesizedSelect: ParenthesizedSelect[12, 22]
                (openParenthesesToken: OpenParentheses[12, 13])
                (item: Select[13, 21]
                  (selectToken: SELECT[13, 19])
                  (WhiteSpace[19, 20])
                  (selectItemList1: SelectItemList1[20, 21]
                    (item[]: ExpressionSelectItem[20, 21]
                      (expression: Identifier[20, 21])
                    )
                  )
                )
                (closeParenthesesToken: CloseParentheses[21, 22])
              )
            )
            (WhiteSpace[22, 23])
            (Unexpected Colon[23, 24])
            (operator: Equal[24, 25])
            (WhiteSpace[25, 26])
            (right: Identifier[26, 27])
          )
!`
-----
SELECT a IN (b) := x
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 20]
            (left: InExpressionTuple1Predicate[7, 15]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (inToken: IN[9, 11])
              (WhiteSpace[11, 12])
              (expressionTuple1: ExpressionTuple1[12, 15]
                (openParenthesesToken: OpenParentheses[12, 13])
                (item[]: Identifier[13, 14])
                (closeParenthesesToken: CloseParentheses[14, 15])
              )
            )
            (WhiteSpace[15, 16])
            (Unexpected Colon[16, 17])
            (operator: Equal[17, 18])
            (WhiteSpace[18, 19])
            (right: Identifier[19, 20])
          )
!`
-----
SELECT a | @b := x
-----
`!
          (expression: BinaryBitExpression[7, 18]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Bar[9, 10])
            (WhiteSpace[10, 11])
            (right: UserVariableIdentifierAssignment[11, 18]
!`
-----
SELECT a & @b := x
-----
`!
          (expression: BinaryBitExpression[7, 18]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Ampersand[9, 10])
            (WhiteSpace[10, 11])
            (right: UserVariableIdentifierAssignment[11, 18]
!`
-----
SELECT a << @b := x
-----
`!
          (expression: BinaryBitExpression[7, 19]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: LessLess[9, 11])
            (WhiteSpace[11, 12])
            (right: UserVariableIdentifierAssignment[12, 19]
!`
-----
SELECT a + @b := x
-----
`!
          (expression: BinaryBitExpression[7, 18]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Plus[9, 10])
            (WhiteSpace[10, 11])
            (right: UserVariableIdentifierAssignment[11, 18]
!`
-----
SELECT a * @b := x
-----
`!
          (expression: BinaryBitExpression[7, 18]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Asterisk[9, 10])
            (WhiteSpace[10, 11])
            (right: UserVariableIdentifierAssignment[11, 18]
!`
-----
SELECT a ^ @b := x
-----
`!
          (expression: BinaryBitExpression[7, 18]
            (left: Identifier[7, 8])
            (WhiteSpace[8, 9])
            (operator: Caret[9, 10])
            (WhiteSpace[10, 11])
            (right: UserVariableIdentifierAssignment[11, 18]
!`
-----
SELECT - @a := x
-----
`!
          (expression: PrefixSimpleExpression[7, 16]
            (operator: Minus[7, 8])
            (WhiteSpace[8, 9])
            (expression: UserVariableIdentifierAssignment[9, 16]
!`
-----
SELECT ! @a := x
-----
`!
          (expression: Not2SimpleExpression[7, 16]
            (exclamationToken: Exclamation[7, 8])
            (WhiteSpace[8, 9])
            (expression: UserVariableIdentifierAssignment[9, 16]
              (userVariableIdentifier: UserVariableIdentifier[9, 11]
                (atToken: At[9, 10])
                (identifier: Identifier[10, 11])
              )
              (WhiteSpace[11, 12])
              (colonEqual: ColonEqual[12, 14]
                (colonToken: Colon[12, 13])
                (equalToken: Equal[13, 14])
              )
              (WhiteSpace[14, 15])
              (expression: Identifier[15, 16])
            )
          )
!`
-----
SELECT BINARY @a := x
-----
`!
          (expression: PrefixSimpleExpression[7, 21]
            (operator: BINARY[7, 13])
            (WhiteSpace[13, 14])
            (expression: UserVariableIdentifierAssignment[14, 21]
              (userVariableIdentifier: UserVariableIdentifier[14, 16]
                (atToken: At[14, 15])
                (identifier: Identifier[15, 16])
              )
              (WhiteSpace[16, 17])
              (colonEqual: ColonEqual[17, 19]
                (colonToken: Colon[17, 18])
                (equalToken: Equal[18, 19])
              )
              (WhiteSpace[19, 20])
              (expression: Identifier[20, 21])
            )
          )
!`
-----
SELECT a COLLATE utf8mb4_unicode_ci := x
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 40]
            (left: CollateSimpleExpression[7, 35]
              (expression: Identifier[7, 8])
              (WhiteSpace[8, 9])
              (collateToken: COLLATE[9, 16])
              (WhiteSpace[16, 17])
              (collation: Identifier[17, 35])
            )
            (WhiteSpace[35, 36])
            (Unexpected Colon[36, 37])
            (operator: Equal[37, 38])
            (WhiteSpace[38, 39])
            (right: Identifier[39, 40])
          )
!`
-----
SELECT INTERVAL a DAY + @b := x
-----
`!
          (expression: IntervalExpressionPlus[7, 31]
            (left: IntervalExpression[7, 21]
              (intervalToken: INTERVAL[7, 15])
              (WhiteSpace[15, 16])
              (expression: Identifier[16, 17])
              (WhiteSpace[17, 18])
              (temporalUnit: DAY[18, 21])
            )
            (WhiteSpace[21, 22])
            (operator: Plus[22, 23])
            (WhiteSpace[23, 24])
            (right: UserVariableIdentifierAssignment[24, 31]
              (userVariableIdentifier: UserVariableIdentifier[24, 26]
                (atToken: At[24, 25])
                (identifier: Identifier[25, 26])
              )
              (WhiteSpace[26, 27])
              (colonEqual: ColonEqual[27, 29]
                (colonToken: Colon[27, 28])
                (equalToken: Equal[28, 29])
              )
              (WhiteSpace[29, 30])
              (expression: Identifier[30, 31])
            )
          )
!`
