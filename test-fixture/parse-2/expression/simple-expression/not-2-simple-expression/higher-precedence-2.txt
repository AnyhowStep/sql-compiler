SELECT !   a BETWEEN b AND c
-----
`!
          (expression: BetweenPredicate[7, 28]
            (left: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (betweenToken: BETWEEN[13, 20])
            (WhiteSpace[20, 21])
            (middle: Identifier[21, 22])
            (WhiteSpace[22, 23])
            (andToken: AND[23, 26])
            (WhiteSpace[26, 27])
            (right: Identifier[27, 28])
          )
!`
-----
SELECT !   a = b
-----
`!
          (expression: ComparisonBooleanPrimaryExpression[7, 16]
            (left: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (operator: Equal[13, 14])
            (WhiteSpace[14, 15])
            (right: Identifier[15, 16])
          )
!`
-----
SELECT !   a = ANY (SELECT b)
-----
`!
          (expression: ComparisonSubQueryBooleanPrimaryExpression[7, 29]
            (expression: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (operator: Equal[13, 14])
            (WhiteSpace[14, 15])
            (quantifier: ANY[15, 18])
            (WhiteSpace[18, 19])
            (parenthesizedSelect: ParenthesizedSelect[19, 29]
!`
-----
SELECT !   a IS UNKNOWN
-----
`!
          (expression: IsExpression[7, 23]
            (left: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (isToken: IS[13, 15])
            (WhiteSpace[15, 16])
            (right: UNKNOWN[16, 23])
          )
!`
-----
SELECT !   a IS NULL
-----
`!
          (expression: IsNullBooleanPrimaryExpression[7, 20]
            (expression: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (isToken: IS[13, 15])
            (WhiteSpace[15, 16])
            (nullToken: NULL[16, 20])
          )
!`
-----
SELECT !   a LIKE b
-----
`!
          (expression: LikePredicate[7, 19]
            (left: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (likeToken: LIKE[13, 17])
            (WhiteSpace[17, 18])
            (right: Identifier[18, 19])
          )
!`
-----
SELECT !   a REGEXP b
-----
`!
          (expression: RegExpPredicate[7, 21]
            (left: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (regexpToken: REGEXP[13, 19])
            (WhiteSpace[19, 20])
            (right: Identifier[20, 21])
          )
!`
-----
SELECT !   a IN (SELECT b)
-----
`!
          (expression: InSubQueryPredicate[7, 26]
            (expression: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (inToken: IN[13, 15])
            (WhiteSpace[15, 16])
            (parenthesizedSelect: ParenthesizedSelect[16, 26]
!`
-----
SELECT !   a IN (b1, b2)
-----
`!
          (expression: InExpressionTuple1Predicate[7, 24]
            (expression: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (WhiteSpace[12, 13])
            (inToken: IN[13, 15])
            (WhiteSpace[15, 16])
            (expressionTuple1: ExpressionTuple1[16, 24]
!`
-----
SELECT !   a|b
-----
`!
          (expression: BinaryBitExpression[7, 14]
            (left: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (operator: Bar[12, 13])
            (right: Identifier[13, 14])
          )
!`
-----
SELECT !   a&b
-----
`!
          (expression: BinaryBitExpression[7, 14]
            (left: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (operator: Ampersand[12, 13])
            (right: Identifier[13, 14])
          )
!`
-----
SELECT !   a<<b
-----
`!
          (expression: BinaryBitExpression[7, 15]
            (left: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (operator: LessLess[12, 14])
            (right: Identifier[14, 15])
          )
!`
-----
SELECT !   a+b
-----
`!
          (expression: BinaryBitExpression[7, 14]
            (left: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (operator: Plus[12, 13])
            (right: Identifier[13, 14])
          )
!`
-----
SELECT !   a*b
-----
`!
          (expression: BinaryBitExpression[7, 14]
            (left: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (operator: Asterisk[12, 13])
            (right: Identifier[13, 14])
          )
!`
-----
SELECT !   a^b
-----
`!
          (expression: BinaryBitExpression[7, 14]
            (left: Not2SimpleExpression[7, 12]
              (exclamationToken: Exclamation[7, 8])
              (WhiteSpace[8, 11])
              (expression: Identifier[11, 12])
            )
            (operator: Caret[12, 13])
            (right: Identifier[13, 14])
          )
!`
