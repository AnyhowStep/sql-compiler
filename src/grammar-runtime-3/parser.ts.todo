import {CompiledShape} from "../compiled-grammar";
import {MyGrammar, MyRule, MyTokenSymbol} from "./grammar";
import {Fields, MySyntaxNode, MyToken, MyToken2} from "./syntax-node";

export interface MyState {
    readonly rule : MyRule;
    readonly dot : number;
    readonly tokenIndex : number;
    readonly startTokenIndex : number;

    readonly data : MySyntaxNode;
    readonly errorCount : number;

    readonly ident : string;

    readonly edges : MyState[];
}

export interface MyStateSet {
    readonly states : MyState[];
    readonly completedNullStates : MyState[];
}

export function makeState0 (grammar : MyGrammar) : MyStateSet {
    const result : MyStateSet = {
        states : [],
        completedNullStates : [],
    };
    const rules = grammar.byName[grammar.start];
    for (const rule of rules) {
        const state : MyState = {
            rule,
            dot : 0,
            tokenIndex : 0,
            startTokenIndex : 0,

            data : {
                syntaxKind : grammar.start,
                children : [],
                start : 0,
                end : -1,

                fields : grammar.ruleName2Fields[grammar.start],
                precedence : rule.precedence,
            },
            errorCount : 0,

            ident : rule.runTimeId.toString(),
            edges : [],
        };
        result.states.push(state);
    }

    return result;
}

export function predictRule (
    grammar : MyGrammar,
    tokens : MyToken[],
    state : MyState,
    expect : string,
    rule : MyRule,
    tryGetState : TryGetStateDelegate,
    hasState : HasStateDelegate,
    addState : (state : MyState) => void
) : boolean {
    const existing = tryGetState(rule, 0, state.tokenIndex, state.tokenIndex, rule.runTimeId.toString(), true);
    if (existing != undefined) {
        /**
         * If the state is a completed null-state,
         * then we need to run its completion on this state.
         */
        if (isFinished(existing)) {
            complete2(
                grammar,
                existing,
                state,
                tryGetState,
                hasState,
                addState
            );
        } else {
            existing.edges.push(state);
        }
        return false;
    }

    const nextState : MyState = {
        rule,
        dot : 0,
        tokenIndex : state.tokenIndex,
        startTokenIndex : state.tokenIndex,

        data : {
            syntaxKind : expect,
            children : [],
            start : (
                state.tokenIndex < tokens.length ?
                tokens[state.tokenIndex].start :
                tokens.length == 0 ?
                0 :
                tokens[state.tokenIndex-1].end
            ),
            end : -1,

            fields : grammar.ruleName2Fields[expect],
            precedence : rule.precedence,
        },
        errorCount : 0,

        ident : rule.runTimeId.toString(),

        edges : [state],
    };

    addState(nextState);
    return true;
}

export function earleyPredict (
    grammar : MyGrammar,
    tokens : MyToken[],
    state : MyState,
    expect : string,
    tryGetState : TryGetStateDelegate,
    hasState : HasStateDelegate,
    addState : (state : MyState) => void
) {
    const rules = grammar.byName[expect];

    for (const rule of rules) {
        predictRule(
            grammar,
            tokens,
            state,
            expect,
            rule,
            tryGetState,
            hasState,
            addState
        );
    }
}

export function predictOneOf (
    grammar : MyGrammar,
    tokens : MyToken[],
    state : MyState,
    expect : string,
    tryGetState : TryGetStateDelegate,
    hasState : HasStateDelegate,
    addState : (state : MyState) => void
) {
    const rules = grammar.byName[expect];

    let minErrorCount = Infinity;
    let minErrorCountIndex = -1;

    for (let i=0; i<rules.length; ++i) {
        const rule = rules[i];
        const tmpStart = expect + "$tmp";
        const tmpTokens = tokens.slice(state.tokenIndex);
        tmpTokens;
        const tmpResults = parse(
            {
                ...grammar,
                start : tmpStart,
                byName : {
                    ...grammar.byName,
                    [tmpStart] : [{
                        ...rule,
                        name : tmpStart,
                        runTimeId : 0,
                    }],
                },
                ruleName2Fields : {
                    ...grammar.ruleName2Fields,
                    [tmpStart] : grammar.ruleName2Fields[expect],
                },
                ruleName2Label : {
                    ...grammar.ruleName2Label,
                    [tmpStart] : grammar.ruleName2Label[expect],
                },
                ruleName2Shape : {
                    ...grammar.ruleName2Shape,
                    [tmpStart] : grammar.ruleName2Shape[expect],
                },
            },
            tmpTokens
        );
        tmpResults;
        if (tmpResults.length == 0) {
            continue;
        }

        const tmpErrorCount = tmpResults[0].errorCount;

        if (tmpErrorCount == 0) {
            //This is the one we want. Ignore all other rules.
            predictRule(
                grammar,
                tokens,
                state,
                expect,
                rule,
                tryGetState,
                hasState,
                addState
            );
            //return;
        }

        if (tmpErrorCount < minErrorCount) {
            minErrorCount = tmpErrorCount;
            minErrorCountIndex = i;
        }
    }

    earleyPredict(
        grammar,
        tokens,
        state,
        expect,
        tryGetState,
        hasState,
        addState
    );

    minErrorCountIndex;
    /*
    if (minErrorCountIndex < 0) {
        return;
    }

    const rule = rules[minErrorCountIndex];
    //This is the rule that gives us the least headaches.
    predictRule(
        grammar,
        tokens,
        state,
        expect,
        rule,
        tryGetState,
        hasState,
        addState
    );*/
}

export function predict (
    grammar : MyGrammar,
    tokens : MyToken[],
    state : MyState,
    expect : string,
    tryGetState : TryGetStateDelegate,
    hasState : HasStateDelegate,
    addState : (state : MyState) => void
) {
    if (/\$oneOf\$\d+$/.test(expect)) {
        predictOneOf(
            grammar,
            tokens,
            state,
            expect,
            tryGetState,
            hasState,
            addState
        );
        return;
    }

    earleyPredict(
        grammar,
        tokens,
        state,
        expect,
        tryGetState,
        hasState,
        addState
    );
}

export type TryGetStateDelegate = (
    rule : MyRule,
    dot : number,
    tokenIndex : number,
    startTokenIndex : number,
    ident : string,
    finished : boolean
) => MyState|undefined;

export type HasStateDelegate = (
    rule : MyRule,
    dot : number,
    tokenIndex : number,
    startTokenIndex : number,
    ident : string
) => boolean;

export function getResults (
    grammar : MyGrammar,
    resultStateSet : MyStateSet
) {
    const resultStates = resultStateSet.states
        .filter((state) => {
            return (
                state.startTokenIndex == 0 &&
                isFinished(state) &&
                state.rule.name == grammar.start
            );
        });
    const minErrorCount = resultStates.reduce(
        (min, cur) => Math.min(min, cur.errorCount),
        Infinity
    );
    const result = resultStates
        .filter(state => state.errorCount == minErrorCount);
        //.map(state => state.data);

    return result;
}

export function parse (
    grammar : MyGrammar,
    tokens : MyToken[]
) : MyState[] {
    const stateSets = new Map<number, MyStateSet>();
    stateSets.set(0, makeState0(grammar));

    function getStateSet (tokenIndex : number, expect : string) : MyStateSet {
        let stateSet = stateSets.get(tokenIndex);
        if (stateSet == undefined) {
            stateSet = {
                states : [],
                completedNullStates : [],
            };
            stateSets.set(tokenIndex, stateSet);
            //Empty
            return stateSet;
        }

        const states = stateSet.states.filter(state => {
            return state.rule.symbols[state.dot] === expect;
        });
        return {
            states,
            completedNullStates : stateSet.completedNullStates,
        };
    }

    function hasState (rule : MyRule, dot : number, tokenIndex : number, startTokenIndex : number, _ident : string) {
        const stateSet = stateSets.get(tokenIndex);
        if (stateSet == undefined) {
            return false;
        }

        return stateSet.states.some(a => (
            a.rule.runTimeId == rule.runTimeId &&
            a.dot == dot &&
            a.startTokenIndex == startTokenIndex &&
            a.ident == _ident
        ));
    }

    function tryGetState (rule : MyRule, dot : number, tokenIndex : number, startTokenIndex : number, _ident : string, finished : boolean) {
        const stateSet = stateSets.get(tokenIndex);
        if (stateSet == undefined) {
            return undefined;
        }
        // const result = stateSet.states.find(a => (
        //     a.rule.runTimeId == rule.runTimeId &&
        //     a.startTokenIndex == startTokenIndex &&
        //     a.dot == dot
        // ));
        // return result;
        const results =  stateSet.states.filter(a => (
            a.rule.runTimeId == rule.runTimeId &&
            a.startTokenIndex == startTokenIndex &&
            (
                (
                    a.ident == _ident &&
                    a.dot == dot
                ) ||
                (finished && isFinished(a))
            )
        ));

        if (results.length == 0) {
            return undefined;
        }

        if (results.length == 1) {
            return results[0];
        }

        if (isFinished(results[1])) {
            return results[1];
        }

        return results[0];
    }

    function addState (state : MyState) {
        const stateSet = stateSets.get(state.tokenIndex);
        if (stateSet == undefined) {
            stateSets.set(state.tokenIndex, {
                states : [state],
                completedNullStates : [],
            });
            return;
        }

        stateSet.states.push(state);
    }

    //eslint-disable-next-line @typescript-eslint/prefer-for-of
    for (let i=0; i<tokens.length; ++i) {
        const stateSet = stateSets.get(i);
        if (stateSet == undefined) {
            throw new Error(`Unable to find state set for ${i}`);
        }
        if (stateSet.states.length == 0) {
            throw new Error(`State set ${i} is empty`);
        }

        processStateSet(
            grammar,
            tokens,
            stateSet,
            getStateSet,
            tryGetState,
            hasState,
            addState,
            0
        );

        let nextStateSet = stateSets.get(i+1);
        if (nextStateSet == undefined || nextStateSet.states.length == 0) {
            const stateSetLength = stateSet.states.length;

            const blah = stateSet.states.filter(s => {
                return s.rule.name == "LeadingStatement" && s.dot == 0;
            });
            blah;

            //Adds stuff to the next state set
            //We *must* call this first.
            skipUnexpected(
                grammar,
                tokens,
                stateSet,
                hasState,
                addState
            );


            //Adds stuff to the current state set
            //We *must* call this second.
            skipExpectation(
                grammar,
                tokens,
                stateSet,
                hasState,
                addState
            );

            if (stateSetLength == stateSet.states.length) {
                //No new states added.
                //This is just a partial parse.
                return getResults(grammar, stateSet);
            }

            //We *must* call this last.
            processStateSet(
                grammar,
                tokens,
                stateSet,
                getStateSet,
                tryGetState,
                hasState,
                addState,
                stateSetLength
            );

            nextStateSet = stateSets.get(i+1);
        }
    }

    const resultStateSet = stateSets.get(tokens.length);
    if (resultStateSet == undefined) {
        throw new Error(`Unable to find state set for ${tokens.length}`);
    }
    if (resultStateSet.states.length == 0) {
        throw new Error(`State set ${tokens.length} is empty`);
    }

    processStateSet(
        grammar,
        tokens,
        resultStateSet,
        getStateSet,
        tryGetState,
        hasState,
        addState,
        0
    );

    const result = getResults(grammar, resultStateSet);
    if (result.length > 0) {
        return result;
    }

    let skipExpectationStart = 0;

    while (true) {
        const stateSetLength = resultStateSet.states.length;

        //Adds stuff to the current state set
        //We *must* call this second.
        skipExpectation(
            grammar,
            tokens,
            resultStateSet,
            hasState,
            addState,
            skipExpectationStart
        );

        if (stateSetLength == resultStateSet.states.length) {
            //No new states added.
            //This is just a partial parse.
            return getResults(grammar, resultStateSet);
        }

        skipExpectationStart = stateSetLength;

        //We *must* call this last.
        processStateSet(
            grammar,
            tokens,
            resultStateSet,
            getStateSet,
            tryGetState,
            hasState,
            addState,
            stateSetLength
        );

        const result = getResults(grammar, resultStateSet);
        if (result.length > 0) {
            return result;
        }
    }
}

export function processStateSet (
    grammar : MyGrammar,
    tokens : MyToken[],
    stateSet : MyStateSet,
    getStateSet : (tokenIndex : number, expect : string) => MyStateSet,
    tryGetState : TryGetStateDelegate,
    hasState : HasStateDelegate,
    addState : (state : MyState) => void,
    startIndex : number
) {
    /**
     * `stateSet.states` can grow during the loop
     */
    for (let i=startIndex; i<stateSet.states.length; ++i) {
        const state = stateSet.states[i];

        if (isFinished(state)) {
            complete(grammar, stateSet, state, getStateSet, tryGetState, hasState, addState);
        } else {
            const expect = state.rule.symbols[state.dot];
            if (typeof expect == "string") {
                predict(grammar, tokens, state, expect, tryGetState, hasState, addState);
            } else {
                scan(state, tokens, expect, hasState, addState);
            }
        }
    }
}

function mergeFields (aShape : CompiledShape, a : Fields, b : Fields) : Fields {
    const result : Fields = {
        ...a,
    };

    for (const key of Object.keys(b)) {
        const aValue = a[key];
        const bValue = b[key];

        if (aValue == undefined) {
            const field = aShape.fields[key];
            if (field.quantity.multiple) {
                if (bValue instanceof Array) {
                    result[key] = bValue;
                } else {
                    result[key] = bValue == undefined ? [] : [bValue];
                }
            } else {
                if (bValue instanceof Array) {
                    throw new Error(`${aShape.ruleName}.${key} cannot be single-value field; trying to merge with array`);
                } else {
                    result[key] = bValue;
                }
            }
        } else if (aValue instanceof Array) {
            if (bValue instanceof Array) {
                result[key] = [...aValue, ...bValue];
            } else {
                result[key] = bValue == undefined ? [...aValue] : [...aValue, bValue];
            }
        } else {
            if (bValue instanceof Array) {
                result[key] = [aValue, ...bValue];
            } else {
                result[key] = bValue == undefined ? [aValue] : [aValue, bValue];
            }
        }
    }

    return result;
}

export function push (data : MySyntaxNode, token : MyToken2) : MySyntaxNode {
    return {
        syntaxKind : data.syntaxKind,
        children : [...data.children, token],

        start : data.start,
        end : data.end,

        fields : data.fields,
        precedence : data.precedence,
    };

    /*
    const lastChild = (
        data.children.length == 0 ?
        undefined :
        data.children[data.children.length-1]
    );
    if (
        //token.errorKind == undefined ||
        lastChild == undefined ||
        "children" in lastChild ||
        lastChild.errorKind == undefined
    ) {
        return {
            syntaxKind : data.syntaxKind,
            children : [...data.children, token],

            start : data.start,
            end : data.end,

            fields : data.fields,
        };
    }

    if (
        token.errorKind == undefined &&
        lastChild.consecutiveErrors != undefined &&
        lastChild.consecutiveErrors.some(token => token.errorKind == undefined)
    ) {
        return {
            syntaxKind : data.syntaxKind,
            children : [...data.children, token],

            start : data.start,
            end : data.end,

            fields : data.fields,
        };
    }

    const leading = data.children.slice(0, data.children.length-1);
    if (lastChild.consecutiveErrors == undefined) {
        return {
            syntaxKind : data.syntaxKind,
            children : [
                ...leading,
                {
                    ...lastChild,
                    consecutiveErrors : [token],
                }
            ],

            start : data.start,
            end : data.end,

            fields : data.fields,
        };
    } else {
        return {
            syntaxKind : data.syntaxKind,
            children : [
                ...leading,
                {
                    ...lastChild,
                    consecutiveErrors : [...lastChild.consecutiveErrors, token],
                }
            ],

            start : data.start,
            end : data.end,

            fields : data.fields,
        };
    }
    //*/
}

export function pushChild (grammar : MyGrammar, parent : MySyntaxNode, child : MySyntaxNode) : MySyntaxNode {
    const childLabel = grammar.ruleName2Label[child.syntaxKind];

    if (childLabel == undefined) {
        return {
            syntaxKind : parent.syntaxKind,
            children : [...parent.children, child],

            start : parent.start,
            end : parent.end,

            fields : parent.fields,
            precedence : parent.precedence,
        };
    } else {
        const parentShape = grammar.ruleName2Shape[grammar.ruleName2Alias[parent.syntaxKind] ?? parent.syntaxKind];
        const field = parentShape.fields[childLabel];
        const newFields : Fields = {};

        if (field.quantity.multiple) {
            newFields[childLabel] = [child];
        } else {
            newFields[childLabel] = child;
        }

        return {
            syntaxKind : parent.syntaxKind,
            children : [...parent.children, child],

            start : parent.start,
            end : parent.end,

            fields : mergeFields(parentShape, parent.fields, newFields),
            precedence : parent.precedence,
        };
    }
}

export function inlineChild (grammar : MyGrammar, parent : MySyntaxNode, child : MySyntaxNode) : MySyntaxNode {
    const childLabel = grammar.ruleName2Label[child.syntaxKind];
    const parentShape = grammar.ruleName2Shape[grammar.ruleName2Alias[parent.syntaxKind] ?? parent.syntaxKind];

    if (childLabel == undefined) {
        return {
            syntaxKind : parent.syntaxKind,
            children : [...parent.children, ...child.children],

            start : parent.start,
            end : child.end,

            fields : mergeFields(parentShape, parent.fields, child.fields),
            precedence : parent.precedence,
        };
    } else {
        const field = parentShape.fields[childLabel];
        const newFields : Fields = {};

        if (field.quantity.multiple) {
            newFields[childLabel] = [...child.children];
        } else {
            const tmp = child.children.filter(item => {
                return "children" in item || item.errorKind != "Unexpected";
            });
            if (tmp.length == 0) {
                if (field.quantity.required) {
                    throw new Error(`${parent.syntaxKind} inlining ${childLabel}:${child.syntaxKind} with ${child.children.length}/${tmp.length} children; but field is required`);
                } else {
                    newFields[childLabel] = undefined;
                }
            } else if (tmp.length == 1) {
                newFields[childLabel] = tmp[0];
            } else {
                throw new Error(`${parent.syntaxKind} inlining ${childLabel}:${child.syntaxKind} with ${child.children.length}/${tmp.length} children`);
            }
        }

        return {
            syntaxKind : parent.syntaxKind,
            children : [...parent.children, ...child.children],

            start : parent.start,
            end : child.end,

            fields : mergeFields(
                parentShape,
                mergeFields(parentShape, parent.fields, child.fields),
                newFields
            ),
            precedence : parent.precedence,
        };
    }
}

export function acceptsToken (expect : MyTokenSymbol, token : MyToken) {
    if (expect.tokenKind == token.tokenKind) {
        return true;
    }
    if (expect.otherTokenKinds == undefined) {
        return false;
    }
    return expect.otherTokenKinds.includes(token.tokenKind);
}

export function scan (
    state : MyState,
    tokens : MyToken[],
    expect : MyTokenSymbol,
    hasState : HasStateDelegate,
    addState : (state : MyState) => void
) {
    const token = tokens[state.tokenIndex];
    if (token == undefined || !acceptsToken(expect, token)) {
        return;
    }
    if (hasState(state.rule, state.dot+1, state.tokenIndex+1, state.startTokenIndex, state.ident)) {
        return;
    }
    const nextState : MyState = {
        rule : state.rule,
        dot : state.dot+1,
        tokenIndex : state.tokenIndex+1,
        startTokenIndex : state.startTokenIndex,

        data : push(state.data, {
            ...token,
            tokenIndex : state.tokenIndex,
        }),
        errorCount : state.errorCount,

        ident : state.ident,

        edges : [state],
    };
    addState(nextState);
}

export function skipUnexpected (
    grammar : MyGrammar,
    tokens : MyToken[],
    stateSet : MyStateSet,
    hasState : HasStateDelegate,
    addState : (state : MyState) => void
) {
    grammar;

    for (const state of stateSet.states) {
        if (isFinished(state)) {
            continue;
        }
        const expect = state.rule.symbols[state.dot];
        if (expect == undefined) {
            continue;
        }

        const skippedToken = tokens[state.tokenIndex];

        if (typeof expect == "string") {
            // if (hasState(state.rule, state.dot, state.tokenIndex+1, state.startTokenIndex, state.ident)) {
            //     continue;
            // }
            // const nextState : MyState = {
            //     rule : state.rule,
            //     dot : state.dot,
            //     tokenIndex : state.tokenIndex+1,
            //     startTokenIndex : state.startTokenIndex,

            //     data : push(
            //         state.data,
            //         {
            //             ...skippedToken,
            //             errorKind : "Unexpected",
            //             text : skippedToken.text,
            //             expectedTokenKind : undefined,
            //         }
            //     ),
            //     errorCount : state.errorCount+1,

            //     ident : state.ident,
            //     edges : [state],
            // };
            // nextState;
            // //state.hasNextState = true;
            // addState(nextState);
            continue;
        }

        if (hasState(state.rule, state.dot, state.tokenIndex+1, state.startTokenIndex, state.ident)) {
            continue;
        }
        const nextState : MyState = {
            rule : state.rule,
            dot : state.dot,
            tokenIndex : state.tokenIndex+1,
            startTokenIndex : state.startTokenIndex,

            data : push(
                state.data,
                {
                    ...skippedToken,
                    errorKind : "Unexpected",
                    text : skippedToken.text,
                    expectedTokenKind : expect.tokenKind,
                    tokenIndex : state.tokenIndex,
                }
            ),
            errorCount : state.errorCount+1,

            ident : state.ident,
            edges : [state],
        };
        //state.hasNextState = true;
        addState(nextState);
    }
}

/**
 * This adds states to the current `stateSet`
 */
export function skipExpectation (
    grammar : MyGrammar,
    tokens : MyToken[],
    stateSet : MyStateSet,
    hasState : HasStateDelegate,
    addState : (state : MyState) => void,
    startIndex : number = 0
) {
    /**
     * We go backwards so we do not iterate over our new insertions
     */
    for (let i=stateSet.states.length-1; i>=startIndex; --i) {
        const state = stateSet.states[i];
        if (isFinished(state)) {
            continue;
        }
        const expect = state.rule.symbols[state.dot];
        if (expect == undefined || typeof expect == "string") {
            continue;
        }
        if (hasState(state.rule, state.dot+1, state.tokenIndex, state.startTokenIndex, state.ident)) {
            continue;
        }
        if (state.data.children.length > 0) {
            const lastChild = state.data.children[state.data.children.length-1];
            if ("tokenKind" in lastChild) {
                if (lastChild.tokenKind != undefined && grammar.extras.has(lastChild.tokenKind)) {
                    //We do not want to "expect" extras twice in a row
                    continue;
                }
            }
        }

        const token : MyToken = (
            state.tokenIndex < tokens.length ?
            tokens[state.tokenIndex] :
            tokens.length == 0 ?
            {
                tokenKind : "EndOfFile",
                text : "",
                start : 0,
                end : 0,
            } :
            {
                tokenKind : "EndOfFile",
                text : "",
                start : tokens[tokens.length-1].end,
                end : tokens[tokens.length-1].end,
            }
        );

        const nextState : MyState = {
            rule : state.rule,
            dot : state.dot+1,
            tokenIndex : state.tokenIndex,
            startTokenIndex : state.startTokenIndex,

            data : push(
                state.data,
                {
                    tokenKind : expect.tokenKind,
                    text : "",
                    errorKind : "Expected",
                    start : token.start,
                    end : token.start,
                    tokenIndex : -1,
                }
            ),
            errorCount : state.errorCount+1,

            ident : state.ident,
            edges : [state],
        };
        if (expect.tokenKind == "WhiteSpace") {
            //wtf
            expect.tokenKind;
        }
        addState(nextState);
    }
}

export function isFinished (state : MyState) {
    return state.dot == state.rule.symbols.length;
}

// function isAllError (state : Pick<MyState["data"], "children">) : boolean {
//     for (const child of state.children) {
//         if ("tokenKind" in child) {
//             if (child.errorKind == undefined) {
//                 return false;
//             }
//         } else {
//             if (!isAllError(child)) {
//                 return false;
//             }
//         }
//     }

//     return true;
// }

export function countConsecutiveErrors (grammar : MyGrammar, node : Pick<MySyntaxNode, "children">, startCount : number, maxCount : number) : number {

    let curCount = startCount;
    for (const child of node.children) {
        if ("tokenKind" in child) {
            if (child.errorKind == undefined) {
                if (grammar.extras.has(child.tokenKind)) {

                } else {
                    curCount = 0;
                }
            } else {
                ++curCount;
                if (curCount >= maxCount) {
                    return curCount;
                }
            }
        } else {
            curCount = countConsecutiveErrors(grammar, child, curCount, maxCount);
            if (curCount >= maxCount) {
                return curCount;
            }
        }
    }

    return curCount;
}

export function complete2 (
    grammar : MyGrammar,
    state : MyState,
    other : MyState,
    tryGetState : TryGetStateDelegate,
    hasState : HasStateDelegate,
    addState : (state : MyState) => void
) {
    if (state.data.children.length > 1 && state.data.children.every(child => "errorKind" in child && child.errorKind == "Expected")) {
        /**
         * We don't want a syntax node with many expected tokens missing.
         * Maybe.
         *
         * This feel **VERY** hacky, however.
         *
         * See [this](test-fixture/parse-2/delimiter/custom-delimiter-alphabet-unintuitive-2.txt)
         * for the file that will create many `Expected` tokens in a row.
         */
        return;
    }
    const nextIdent = (
        //state.rule.name == grammar.extrasRuleName ?
        //other.ident :
        //grammar.extrasRuleName != undefined && state.rule.name.startsWith(grammar.extrasRuleName) ?
        //other.ident :
        other.ident + "-" + state.ident
    );
    const existing = tryGetState(other.rule, other.dot+1, state.tokenIndex, other.startTokenIndex, nextIdent, false);
    if (existing != undefined) {
        const errorCount = existing.edges.reduce(
            (min, s) => Math.min(min, s.errorCount),
            Infinity
        );
        if (state.errorCount < errorCount) {
            existing.edges.push(state);
        } else if (state.errorCount == errorCount) {
            existing.edges.push(state);
        } else {
            existing.edges.push(state);
        }
        return;
    }
    hasState;
    if (hasState(other.rule, other.dot+1, state.tokenIndex, other.startTokenIndex, nextIdent)) {
        //return;
    }

    if (other.data.children.length > 0 && state.data.children.length > 0) {
        const lastChild = other.data.children[other.data.children.length-1];
        const firstChild = state.data.children[0];
        if (
            "tokenKind" in lastChild && grammar.extras.has(lastChild.tokenKind) &&
            "tokenKind" in firstChild && grammar.extras.has(firstChild.tokenKind) &&
            lastChild.errorKind == "Expected" &&
            firstChild.errorKind == "Expected"
        ) {
            /**
             * Last child of other.data is extra.
             * First child of state.data is extra.
             *
             * Both extras are missing/expected.
             *
             * If we concat (other, state), we get two missing/expected whitespaces in a row.
             * We do not want this.
             */
            return;
        }
    }

    const stateData : MySyntaxNode = {
        ...state.data,
        end : (
            state.data.children.length == 0 ?
            state.data.start :
            state.data.children[state.data.children.length-1].end
        ),
    };

    const nextData = (
        stateData.syntaxKind.includes("$") || grammar.inline.has(stateData.syntaxKind) ?
        inlineChild(grammar, other.data, stateData) :
        pushChild(grammar, other.data, stateData)
    );


    const nextState : MyState = {
        rule : other.rule,
        dot : other.dot+1,
        tokenIndex : state.tokenIndex,
        startTokenIndex : other.startTokenIndex,

        data : nextData,
        errorCount : other.errorCount + state.errorCount,

        ident : nextIdent,
        edges : [state],
    };
    addState(nextState);
}

export function complete (
    grammar : MyGrammar,
    stateSet : MyStateSet,
    state : MyState,
    getStateSet : (tokenIndex : number, expect : string) => MyStateSet,
    tryGetState : TryGetStateDelegate,
    hasState : HasStateDelegate,
    addState : (state : MyState) => void
) {
    if (state.tokenIndex == state.startTokenIndex) {
        stateSet.completedNullStates.push(state);
    }

    const startStateSet = getStateSet(state.startTokenIndex, state.rule.name);
    for (const other of startStateSet.states) {
        complete2(
            grammar,
            state,
            other,
            tryGetState,
            hasState,
            addState
        );
    }
}
